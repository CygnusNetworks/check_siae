# PySNMP SMI module. Autogenerated from smidump -f python SIAE-USER-MIB
# by libsmi2pysnmp-0.1.3 at Wed Apr  3 15:18:55 2019,
# Python version sys.version_info(major=2, minor=7, micro=15, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( siaeMib, ) = mibBuilder.importSymbols("SIAE-TREE-MIB", "siaeMib")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( Bits, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, RowStatus, StorageType, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "StorageType")

# Objects

accessControl = ModuleIdentity((1, 3, 6, 1, 4, 1, 3373, 1103, 5)).setRevisions(("2014-04-08 00:00","2014-02-03 00:00","2013-04-16 00:00",))
if mibBuilder.loadTexts: accessControl.setOrganization("SIAE MICROELETTRONICA spa")
if mibBuilder.loadTexts: accessControl.setContactInfo("SIAE MICROELETTONICA s.p.a.\nVia Michelangelo Buonarroti, 21\n20093 - Cologno Monzese\nMilano - ITALY\nPhone :  +39-02-27325-1\nE-mail: tbd@siaemic.com")
if mibBuilder.loadTexts: accessControl.setDescription("User privileges and credentials for SIAE equipment access\ncontrol.")
accessControlMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessControlMibVersion.setDescription("Numerical version of this module.\nThe string version of this MIB have the following format:\n   XX.YY.ZZ\nso, for example, the value 1 should be interpreted as 00.00.01\nand the value 10001 should be interpreted as 01.00.01.")
accessControlGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2))
if mibBuilder.loadTexts: accessControlGroupTable.setDescription("Table with Group records.")
accessControlGroupRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1)).setIndexNames((0, "SIAE-USER-MIB", "accessControlGroupName"))
if mibBuilder.loadTexts: accessControlGroupRecord.setDescription("Group record. At most 10 records can be present in \naccessControlGroupTable.")
accessControlGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlGroupName.setDescription("ASCII string identifying the Group, used as index for the table.")
accessControlGroupProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,3,)).subtype(namedValues=NamedValues(("admin", 1), ("readwrite", 2), ("maintenance", 3), ("readonly", 4), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlGroupProfile.setDescription("This object defines the group access privileges. 'Admin' profile can \nread and write all MIB, 'readwrite' profile can write all MIB leaves \nbut it can not manage users, 'maintenance' profile can do only manual \noperations, while 'readonly' can only perform get operations.")
accessControlGroupHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("deny", 1), ("allow", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlGroupHttp.setDescription("This object allows or denies a given group using http protocol\nfor WebLct to access equipment.")
accessControlGroupHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("deny", 1), ("allow", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlGroupHttps.setDescription("This object allows or denies a given group using https protocol\nfor WebLct to access equipment.")
accessControlGroupSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("deny", 1), ("allowV1", 2), ("allowV2c", 3), ("allowV3", 4), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlGroupSnmp.setDescription("This object allows or denies a given group using snmp \nprotocol to access network equipment. If snmp protocol \nis enabled, it is possible to choose between V1, V2c \nand V3 versions of snmp.")
accessControlGroupFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("deny", 1), ("allow", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlGroupFtp.setDescription("This object allows or denies a given group using ftp \nprotocol.")
accessControlGroupSftp = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("deny", 1), ("allow", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlGroupSftp.setDescription("This object allows or denies a given group using sftp \nprotocol.")
accessControlGroupSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("deny", 1), ("allow", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlGroupSsh.setDescription("This object allows or denies a given group using ssh \nprotocol.")
accessControlGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlGroupRowStatus.setDescription("This object is used to manage a row in accessControlGroupTable.")
accessControlGroupCli = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("deny", 1), ("allow", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessControlGroupCli.setDescription("This object allows or denies a given group using both cli through \nserial port and remote cli (telnet). Only 'admin' profile is\nallowed to use cli and can execute all commands.")
accessControlUserTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3))
if mibBuilder.loadTexts: accessControlUserTable.setDescription("Table with User records. At most 10 records can be present in \naccessControlUserTable.")
accessControlUserRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3, 1)).setIndexNames((0, "SIAE-USER-MIB", "accessControlUserName"))
if mibBuilder.loadTexts: accessControlUserRecord.setDescription("User record.")
accessControlUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlUserName.setDescription("ASCII string identifying the user.")
accessControlUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlUserGroupName.setDescription("This object specifies which group this user belongs to.\nIt must refers to an entry of accessControlGroupTable.")
accessControlUserPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlUserPwd.setDescription("This object specifies the login password of the specified\nuser.")
accessControlUserSnmpAuthProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("noAuth", 1), ("md5", 2), ("sha", 3), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlUserSnmpAuthProt.setDescription("This object is used to set the user authentication protocol\nif the related group can use snmp protocol.")
accessControlUserSnmpAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlUserSnmpAuthKey.setDescription("This object specifies the user authentication key if\nthe related group can use snmpv3 protocol.")
accessControlUserSnmpPrivProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("noPriv", 1), ("des", 2), ("aes", 3), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlUserSnmpPrivProt.setDescription("This object is used to set the user cipher protocol if \nthe related group can use snmp protocol.")
accessControlUserSnmpPrivKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlUserSnmpPrivKey.setDescription("This object specifies the user cipher key if the related \ngroup can use snmpv3 protocol.")
accessControlUserTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlUserTimeout.setDescription("This object defines the user timeout after login operation.\nZero timeout means no timeout.")
accessControlUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlUserRowStatus.setDescription("This object is used to manage an instance in accessControlUserTable.")
accessControlLoginTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 4))
if mibBuilder.loadTexts: accessControlLoginTable.setDescription("Table with Login records. At most 4 users via WebLct,\n10 users via snmp and 10 users via cli can be logged \nat the same time in the equipment.")
accessControlLoginRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 4, 1)).setIndexNames((0, "SIAE-USER-MIB", "accessControlLoginIpAddress"), (0, "SIAE-USER-MIB", "accessControlLoginUserName"), (0, "SIAE-USER-MIB", "accessControlLoginType"))
if mibBuilder.loadTexts: accessControlLoginRecord.setDescription("Login record. The create operation is performed by setting\naccessControlLoginPwd object.")
accessControlLoginUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessControlLoginUserName.setDescription("This object defines the name of the logged user.")
accessControlLoginIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessControlLoginIpAddress.setDescription("This object defines the IP address of the logged user.")
accessControlLoginRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noAction", 1), ("logout", 2), ("forcelogout", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlLoginRequest.setDescription("This object is used to do logout or to force logout \nof other users. Only users with 'admin' profile can \nforce logout.")
accessControlLoginTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlLoginTrapEnable.setDescription("This object enables/disables trap receiver for a\ngiven user.")
accessControlLoginType = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("web", 1), ("snmp", 2), ("cli", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessControlLoginType.setDescription("This object identifies login type.")
accessControlLoginPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlLoginPwd.setDescription("This object is used to create a row in the table. It\nmust correspond to the user password defined in \naccessControlUserTable.")
accessControlLoginPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 4, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,)).subtype(namedValues=NamedValues(("polling", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessControlLoginPolling.setDescription("This object is used to refresh the timeout of the related instance\nof the table. To keep user logged in, manager must read this object \nbefore the end of accessControlUserTimeout. For cli users execution \nof cli commands refreshes timeout.")
accessControlClientTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 5))
if mibBuilder.loadTexts: accessControlClientTable.setDescription("Table with records that show client credentials to \naccess FTP and SFTP services.")
accessControlClientRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 5, 1)).setIndexNames((0, "SIAE-USER-MIB", "accessControlClientService"))
if mibBuilder.loadTexts: accessControlClientRecord.setDescription("Client credentials record for a given user.")
accessControlClientService = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 5, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("ftp", 1), ("sftp", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlClientService.setDescription("This object is used to identify the service that a given user\ncan access as client.")
accessControlClientServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 5, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlClientServiceStatus.setDescription("This object is used to enable/disable the FTP/SFTP client\non the equipment. If both clients are enabled, SFTP client\nis adopted.")
accessControlClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlClientName.setDescription("ASCII string identifying the client name.")
accessControlClientPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlClientPwd.setDescription("ASCII string identifying the client password.")
accessControlClientStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 5, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlClientStorageType.setDescription("The storage type for this conceptual row.")
accessControlClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 5, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessControlClientRowStatus.setDescription("The status of this conceptual row.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("SIAE-USER-MIB", PYSNMP_MODULE_ID=accessControl)

# Objects
mibBuilder.exportSymbols("SIAE-USER-MIB", accessControl=accessControl, accessControlMibVersion=accessControlMibVersion, accessControlGroupTable=accessControlGroupTable, accessControlGroupRecord=accessControlGroupRecord, accessControlGroupName=accessControlGroupName, accessControlGroupProfile=accessControlGroupProfile, accessControlGroupHttp=accessControlGroupHttp, accessControlGroupHttps=accessControlGroupHttps, accessControlGroupSnmp=accessControlGroupSnmp, accessControlGroupFtp=accessControlGroupFtp, accessControlGroupSftp=accessControlGroupSftp, accessControlGroupSsh=accessControlGroupSsh, accessControlGroupRowStatus=accessControlGroupRowStatus, accessControlGroupCli=accessControlGroupCli, accessControlUserTable=accessControlUserTable, accessControlUserRecord=accessControlUserRecord, accessControlUserName=accessControlUserName, accessControlUserGroupName=accessControlUserGroupName, accessControlUserPwd=accessControlUserPwd, accessControlUserSnmpAuthProt=accessControlUserSnmpAuthProt, accessControlUserSnmpAuthKey=accessControlUserSnmpAuthKey, accessControlUserSnmpPrivProt=accessControlUserSnmpPrivProt, accessControlUserSnmpPrivKey=accessControlUserSnmpPrivKey, accessControlUserTimeout=accessControlUserTimeout, accessControlUserRowStatus=accessControlUserRowStatus, accessControlLoginTable=accessControlLoginTable, accessControlLoginRecord=accessControlLoginRecord, accessControlLoginUserName=accessControlLoginUserName, accessControlLoginIpAddress=accessControlLoginIpAddress, accessControlLoginRequest=accessControlLoginRequest, accessControlLoginTrapEnable=accessControlLoginTrapEnable, accessControlLoginType=accessControlLoginType, accessControlLoginPwd=accessControlLoginPwd, accessControlLoginPolling=accessControlLoginPolling, accessControlClientTable=accessControlClientTable, accessControlClientRecord=accessControlClientRecord, accessControlClientService=accessControlClientService, accessControlClientServiceStatus=accessControlClientServiceStatus, accessControlClientName=accessControlClientName, accessControlClientPwd=accessControlClientPwd, accessControlClientStorageType=accessControlClientStorageType, accessControlClientRowStatus=accessControlClientRowStatus)

