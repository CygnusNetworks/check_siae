# PySNMP SMI module. Autogenerated from smidump -f python SIAE-EQUIP-MIB
# by libsmi2pysnmp-0.1.3 at Wed Apr  3 15:43:28 2019,
# Python version sys.version_info(major=2, minor=7, micro=15, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( AlarmSeverityCode, AlarmStatus, alarmTrap, ) = mibBuilder.importSymbols("SIAE-ALARM-MIB", "AlarmSeverityCode", "AlarmStatus", "alarmTrap")
( equipTypeUnknown, ) = mibBuilder.importSymbols("SIAE-EQUIPTYPE-MIB", "equipTypeUnknown")
( siaeMib, ) = mibBuilder.importSymbols("SIAE-TREE-MIB", "siaeMib")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks")
( AutonomousType, DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "DisplayString")

# Objects

equipment = ModuleIdentity((1, 3, 6, 1, 4, 1, 3373, 1103, 1)).setRevisions(("2015-03-23 00:00","2014-12-03 00:00","2014-07-01 00:00","2014-06-23 00:00","2014-02-03 00:00","2013-04-16 00:00",))
if mibBuilder.loadTexts: equipment.setOrganization("SIAE MICROELETTRONICA spa")
if mibBuilder.loadTexts: equipment.setContactInfo("SIAE MICROELETTONICA s.p.a.\nVia Michelangelo Buonarroti, 21\n20093 - Cologno Monzese\nMilano - ITALY\nPhone :  +39-02-27325-1\nE-mail: help@siaemic.com")
if mibBuilder.loadTexts: equipment.setDescription("Common parameters of SIAE equipments.")
equipMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipMibVersion.setDescription("Numerical version of this module.\nThe string version of this MIB have the following format:\n   XX.YY.ZZ\nso, for example, the value 1 should be interpreted as 00.00.01\nand the value 10001 should be interpreted as 01.00.01.")
equipCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipCurrentTime.setDescription("Seconds since 1/1/1970.")
equipUpTime = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipUpTime.setDescription("The time since the system was last re-initialized (in seconds\nsince 1/1/1970).")
equipType = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 4), AutonomousType().clone('1.3.6.1.4.1.3373.1103.1.5.1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipType.setDescription("Type of SIAE MICROELETTRONICA's equipment")
equipIpEthOsiAddress = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipIpEthOsiAddress.setDescription("Ip address of the equipment on Ethernet-OSI interface.")
equipGosipAddress = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipGosipAddress.setDescription("GOSIP address of the equipment.")
equipIpEthOsiNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipIpEthOsiNetMask.setDescription("The subnet Mask associated with the IP address of OSI ethernet interface.\nThe value of the Mask is an IP address with all the network bits set to 1\nand all the hosts bits set to 0.")
equipL1L2IsIsRouting = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("l1", 1), ("l2", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipL1L2IsIsRouting.setDescription("It defines the IS-IS routing type: L1 within the same area, L2 among\ndifferent areas.")
equipStationID = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipStationID.setDescription("ASCII string assigned by the operator to identify the specific equipment.")
equipLOMConfigEnable = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLOMConfigEnable.setDescription("Enables/disables the capabilityto connect a LOM in Configuration Mode.")
equipLOMConnected = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("cleared", 1), ("connectionAsMonitor", 2), ("connectionAsConfig", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipLOMConnected.setDescription("Signal when the LOM is connected to the NE and if the connection\nis for monitor or configuration.")
equipLOMConnectedTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("trapDisable", 1), ("trapEnable", 2), ("trapEnableWithAck", 3), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLOMConnectedTrapEnable.setDescription("Enables/disables the trap generation on EquipLOMConnected status change event.")
equipConfigChange = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipConfigChange.setDescription("Set by the NE when the equipment configuration is changed by the local\nor Remote LOM.\nThe octet string is a bit stream of flags; a set bit is a change on a\nspecific item. We had:\nByte 0.7: change in configuration for equipment group\nByte 0.6: change in configuration for userInput group\nByte 0.5: change in configuration for userOutput group\nByte 0.4: change in configuration for alarmLog group\n......\nByte 3.7: change in a severity for equipment group\nByte 3.6: change in a severity for userInput group\nByte 3.5: change in a severity for userOutput group\nByte 3.4: change in a severity for alarmLog group\nCEM can reset the change condition writing one to desired bit flag\n......")
equipConfigChangeTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("trapDisable", 1), ("trapEnable", 2), ("trapEnableWithACK", 3), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipConfigChangeTrapEnable.setDescription("Enables/disables the trap generation on EquipConfigChange status\nchange event.")
equipRequest = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,100,20,127,50,6,21,8,4,11,5,0,126,125,7,3,1,)).subtype(namedValues=NamedValues(("notActive", 0), ("restart", 1), ("siaeReservedReq1", 100), ("hotApplyIfChange", 11), ("siaeReservedReq26", 125), ("siaeReservedReq27", 126), ("switchFactoryDefault", 127), ("applyIfChange", 2), ("ipStackConfigure", 20), ("osiStackConfigure", 21), ("revertIfChange", 3), ("configClearAndRestart", 4), ("routeTableClear", 5), ("atuTableReset", 50), ("uploadBaseBand", 6), ("offLineRouteRetrieve", 7), ("offLineRouteSave", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipRequest.setDescription("Force Equipment Controller restart or change in interface properties.")
equipIpEthAddress = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipIpEthAddress.setDescription("Ip address of the equipment on Ethernet interface.")
equipIpEthNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipIpEthNetMask.setDescription("The subnet Mask associated with the IP address of ethernet interface.\nThe value of the Mask is an IP address with all the network bits set to 1\nand all the hosts bits set to 0.")
equipOsiamParameter = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipOsiamParameter.setDescription("It defines the set-up parameter for OSI stack.")
equipIpSnmpAgentAddress = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipIpSnmpAgentAddress.setDescription("Ip address used by SNMP Agent for mark generated TRAP.")
equipOperationInProgress = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 21), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipOperationInProgress.setDescription("A value different from 0 means operation in progress.")
equipManagerWakeUpAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 22), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipManagerWakeUpAlarm.setDescription("This alarm switches on when periodic connection wake-up trap starts.\nThe trap related to this alarm is also sent periodically only to the\nmanager specified by the leaf equipManagerWakeUpIpAddr when\nequipManagerWakeUpAlarmSeverityCode differs from disable.")
equipManagerWakeUpAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 23), AlarmSeverityCode().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManagerWakeUpAlarmSeverityCode.setDescription("Defines the severity associated to the equipManagerWakeUpAlarm\nand enables/disables the trap generation on status change event.")
equipManagerWakeUpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManagerWakeUpTimeout.setDescription("This object defines the time (in minutes) after which the periodic\nconnection wake-up trap is stopped.\nThe maximium value is equivalent to 24 hours.\nWhen the timeout elapses the equipManagerWakeUpAlarmSeverityCode\nis set to disable.\nA zero means no timeout.")
equipManagerWakeUpIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManagerWakeUpIpAddr.setDescription("Ip Address of manager wich to send a periodic connection wake-up trap.\nThe periodic trap is sent only if the equipManagerWakeUpAlarmSeverityCode\ndiffers from disable.\nIf Ip Address equals 0 no trap will be sent.")
equipManagerWakeUpGosipAddress = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManagerWakeUpGosipAddress.setDescription("Gosip Address of manager wich to send a periodic connection wake-up trap.")
equipManagerWakeUpTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("trapV1", 1), ("trapV2", 2), ("trapV3", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManagerWakeUpTrapVersion.setDescription("Trap version supported by Manager to wake-up.")
equipManager1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManager1IpAddr.setDescription("First IP address of a SNMP Manager always logged to this equipment.\nThe address 0.0.0.0 mean that manager is not present.")
equipManager2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManager2IpAddr.setDescription("Second IP address of a SNMP Manager always logged to this equipment.\nThe address 0.0.0.0 mean that manager is not present.")
equipManager1TrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 30), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("trapV1", 1), ("trapV2", 2), ("trapV3", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManager1TrapVersion.setDescription("Trap version supported by Manager 1 (related to equipManager1IpAddr).")
equipManager2TrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 31), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("trapV1", 1), ("trapV2", 2), ("trapV3", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManager2TrapVersion.setDescription("Trap version supported by Manager 2 (related to equipManager2IpAddr).")
equipDailyPmTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipDailyPmTimeZone.setDescription("Reference GMT Time Zone to close the daily P.M. records.")
equipOperationMngtControl = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 33), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("notActive", 0), ("startOperation", 1), ("confirmOperation", 2), )).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipOperationMngtControl.setDescription("startOperation means the apply of the 'management parameters\nset' on the E6165 switch.\nconfirmOperation means the backup of the 'management\nparameters set'.")
equipOperationMngtInProgress = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipOperationMngtInProgress.setDescription("A value different from 0 means Mngt operation in progress.")
equipLocation = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLocation.setDescription("ASCII string assigned by the operator to identify the location of\nspecific equipment.")
equipLongitude = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLongitude.setDescription("Geographic coordinate that specifies the east-west position of\nthe equipment.\nIn order to calculate the latitude in degrees the formula to be\napplied is\n   Longitude = equipLongitude*180/2^31\nThis object is used with equipLatitude to locate the equipment\non a map.")
equipLatitude = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLatitude.setDescription("Geographic coordinate that specifies the north-south position of\nthe equipment.\nIn order to calculate the latitude in degrees the formula to be\napplied is\n   Latitude = equipLatitude*180/2^31\nThis object is used with equipLongitude to locate the equipment\non a map.")
equipIpEthVlanId = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipIpEthVlanId.setDescription("Ethernet vlan id on top of which management is built")
equipIpEthDefGateway = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 39), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipIpEthDefGateway.setDescription("Ip address of the default gateway on Ethernet interface.")
equipIpEthDefGatewayIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 1, 40), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipIpEthDefGatewayIfIndex.setDescription("Ip address of the default gateway on Ethernet interface.")

# Augmentions

# Notifications

equipLOMConnectedMonitor = NotificationType((1, 3, 6, 1, 4, 1, 3373, 1103, 0, 109)).setObjects(*(("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress"), ("SIAE-EQUIP-MIB", "equipLOMConnected"), ) )
if mibBuilder.loadTexts: equipLOMConnectedMonitor.setDescription("This event is generated by ALFOHD-NE when equipLOMConnected is set to Monitor mode.\nThe data passed with the event are:\n   1) equipIpSnmpAgentAddress\n   2) equipLOMConnected")
equipLOMConnectedConfig = NotificationType((1, 3, 6, 1, 4, 1, 3373, 1103, 0, 110)).setObjects(*(("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress"), ("SIAE-EQUIP-MIB", "equipLOMConnected"), ) )
if mibBuilder.loadTexts: equipLOMConnectedConfig.setDescription("This event is generated by ALFOHD-NE when equipLOMConnected is set to Configuration mode.\nThe data passed with the event are:\n   1) equipIpSnmpAgentAddress\n   2) equipLOMConnected")
equipLOMDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 3373, 1103, 0, 111)).setObjects(*(("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress"), ("SIAE-EQUIP-MIB", "equipLOMConnected"), ) )
if mibBuilder.loadTexts: equipLOMDisconnected.setDescription("This event is generated by ALFOHD-NE when LOMConnected is cleared.\nThe data passed with the event are:\n   1) equipIpSnmpAgentAddress\n   2) equipLOMConnected")
equipConfigChangeStatus = NotificationType((1, 3, 6, 1, 4, 1, 3373, 1103, 0, 114)).setObjects(*(("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress"), ("SIAE-EQUIP-MIB", "equipConfigChange"), ) )
if mibBuilder.loadTexts: equipConfigChangeStatus.setDescription("This event is generated by ALFOHD-NE when equipConfigChange is changed.\nThe data passed with the event are:\n   1) equipIpSnmpAgentAddress\n   2) equipConfigChange")
equipManagerWakeUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 3373, 1103, 0, 123)).setObjects(*(("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress"), ("SIAE-EQUIP-MIB", "equipGosipAddress"), ("SIAE-EQUIP-MIB", "equipStationID"), ("SIAE-EQUIP-MIB", "equipManagerWakeUpIpAddr"), ("SIAE-EQUIP-MIB", "equipManagerWakeUpAlarm"), ("SIAE-EQUIP-MIB", "equipLocation"), ) )
if mibBuilder.loadTexts: equipManagerWakeUpNotify.setDescription(" This trap is sent periodically only to the manager specified by\nthe leaf equipManagerWakeUpIpAddr when equipManagerWakeUpAlarmSeverityCode\ndiffers from disable.\nThe data passed with the event are:\n   1) equipIpSnmpAgentAddress\n   2) equipStationID\n   3) equipLocation\n   4) equipIpSnmpAgentAddress\n   5) equipGosipAddress\n   6) equipManagerWakeUpIpAddr\n   7) equipManagerWakeUpAlarm")

# Exports

# Module identity
mibBuilder.exportSymbols("SIAE-EQUIP-MIB", PYSNMP_MODULE_ID=equipment)

# Objects
mibBuilder.exportSymbols("SIAE-EQUIP-MIB", equipment=equipment, equipMibVersion=equipMibVersion, equipCurrentTime=equipCurrentTime, equipUpTime=equipUpTime, equipType=equipType, equipIpEthOsiAddress=equipIpEthOsiAddress, equipGosipAddress=equipGosipAddress, equipIpEthOsiNetMask=equipIpEthOsiNetMask, equipL1L2IsIsRouting=equipL1L2IsIsRouting, equipStationID=equipStationID, equipLOMConfigEnable=equipLOMConfigEnable, equipLOMConnected=equipLOMConnected, equipLOMConnectedTrapEnable=equipLOMConnectedTrapEnable, equipConfigChange=equipConfigChange, equipConfigChangeTrapEnable=equipConfigChangeTrapEnable, equipRequest=equipRequest, equipIpEthAddress=equipIpEthAddress, equipIpEthNetMask=equipIpEthNetMask, equipOsiamParameter=equipOsiamParameter, equipIpSnmpAgentAddress=equipIpSnmpAgentAddress, equipOperationInProgress=equipOperationInProgress, equipManagerWakeUpAlarm=equipManagerWakeUpAlarm, equipManagerWakeUpAlarmSeverityCode=equipManagerWakeUpAlarmSeverityCode, equipManagerWakeUpTimeout=equipManagerWakeUpTimeout, equipManagerWakeUpIpAddr=equipManagerWakeUpIpAddr, equipManagerWakeUpGosipAddress=equipManagerWakeUpGosipAddress, equipManagerWakeUpTrapVersion=equipManagerWakeUpTrapVersion, equipManager1IpAddr=equipManager1IpAddr, equipManager2IpAddr=equipManager2IpAddr, equipManager1TrapVersion=equipManager1TrapVersion, equipManager2TrapVersion=equipManager2TrapVersion, equipDailyPmTimeZone=equipDailyPmTimeZone, equipOperationMngtControl=equipOperationMngtControl, equipOperationMngtInProgress=equipOperationMngtInProgress, equipLocation=equipLocation, equipLongitude=equipLongitude, equipLatitude=equipLatitude, equipIpEthVlanId=equipIpEthVlanId, equipIpEthDefGateway=equipIpEthDefGateway, equipIpEthDefGatewayIfIndex=equipIpEthDefGatewayIfIndex)

# Notifications
mibBuilder.exportSymbols("SIAE-EQUIP-MIB", equipLOMConnectedMonitor=equipLOMConnectedMonitor, equipLOMConnectedConfig=equipLOMConnectedConfig, equipLOMDisconnected=equipLOMDisconnected, equipConfigChangeStatus=equipConfigChangeStatus, equipManagerWakeUpNotify=equipManagerWakeUpNotify)

