# PySNMP SMI module. Autogenerated from smidump -f python SIAE-RAEQ-MIB
# by libsmi2pysnmp-0.1.3 at Thu Apr  4 10:13:02 2019,
# Python version sys.version_info(major=2, minor=7, micro=15, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( AlarmSeverityCode, AlarmStatus, ) = mibBuilder.importSymbols("SIAE-ALARM-MIB", "AlarmSeverityCode", "AlarmStatus")
( siaeMib, ) = mibBuilder.importSymbols("SIAE-TREE-MIB", "siaeMib")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, RowStatus, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")

# Types

class BitsPerSymbol(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(7,2,5,10,1,4,6,9,11,3,8,)
    namedValues = NamedValues(("bpsBPSK", 1), ("bps1024QAM", 10), ("bps2048QAM", 11), ("bps4QAM", 2), ("bps8PSK", 3), ("bps16QAM", 4), ("bps32QAM", 5), ("bps64QAM", 6), ("bps128QAM", 7), ("bps256QAM", 8), ("bps512QAM", 9), )
    
class InterfaceIndexOrZero(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)
    

# Objects

radioEquip = ModuleIdentity((1, 3, 6, 1, 4, 1, 3373, 1103, 15)).setRevisions(("2014-10-07 00:00","2014-02-04 00:00","2013-04-16 00:00",))
if mibBuilder.loadTexts: radioEquip.setOrganization("SIAE MICROELETTRONICA spa")
if mibBuilder.loadTexts: radioEquip.setContactInfo("SIAE MICROELETTONICA s.p.a.\nVia Michelangelo Buonarroti, 21\n20093 - Cologno Monzese\nMilano - ITALY\nPhone :  +39-02-27325-1\nE-mail: tbd@siaemic.com")
if mibBuilder.loadTexts: radioEquip.setDescription("Radio Equipment Group parameters")
radioEquipMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipMibVersion.setDescription("Numerical version of this module.\nThe string version of this MIB have the following format:\n   XX.YY.ZZ\nso, for example, the value 1 should be interpreted as 00.00.01\nand the value 10001 should be interpreted as 01.00.01.")
radioEquipSystem = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,9,4,5,8,2,11,6,3,12,10,7,13,14,)).subtype(namedValues=NamedValues(("unequipped", 1), ("radio2x1p0EthConc", 10), ("radio2x1p1XpicMainEthConc", 11), ("radio2x1p1XpicMainNoEthConc", 12), ("radio2x1p1XpicReserveEthConc", 13), ("radio2x1p1XpicReserveNoEthConc", 14), ("radio1p0", 2), ("radio2x1p0NoEthConc", 3), ("radio1p1HeteroFreq", 4), ("radio1p1IsoFreq", 5), ("radio1p1HeteroSpaceDiv", 6), ("radio1p1IsoSpaceDiv", 7), ("radio2x1p0XpicEthConc", 8), ("radio2x1p0XpicNoEthConc", 9), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipSystem.setDescription("The object is used to set the operative mode of the radio connected:\n- single link\n- indipendent two links\n- two links protected hetero frequency\n- two links protected iso frequency\n- two links protected iso frequency with Space Diversity\n- two links protected hetero frequency with Space Diversity\n- indipendent two links with Xpic feature\n- indipendent two links with Xpic feature with another equipment\n  protected (main or reserve)\nBitmap of equipment supported modes is\nfeaturesRadioEquipSystemMap in features group ")
radioEquipFeatureSystemMap = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipFeatureSystemMap.setDescription("The object is used to get the operative modes supported of the radio system,\nIt is structured as bitmap, each bit active means mode supported.\nThese modes are listed in radioEquipSystem leaf.\nFor example if you need to know if mode (x) is supported,\nit's enough to test (1<<(x))&featuresRadioEquipSystemMap,\nthe mode is supported in case test result is not 0")
radioEquipTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4))
if mibBuilder.loadTexts: radioEquipTable.setDescription("Table with radioEquip records.")
radioEquipRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1)).setIndexNames((0, "SIAE-RAEQ-MIB", "radioEquipId"))
if mibBuilder.loadTexts: radioEquipRecord.setDescription("radioEquip records")
radioEquipId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,3,)).subtype(namedValues=NamedValues(("radioEq1A", 1), ("radioEq2A", 2), ("radioEq1B", 3), ("radioEq2B", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipId.setDescription("It identify the radio in n*(1+0) or n*(1+1) configuration.")
radioEquipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipRowStatus.setDescription("Status of this row of radioEquipTable.")
radioEquipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipIfIndex.setDescription(" The ifIndex value the agent selected for this\nserialChannel interface.")
radioEquipLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipLabel.setDescription("ASCII string used to assign a name to the radio side")
radioEquipBandwidthAndModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipBandwidthAndModulation.setDescription("Link Modulation and Bandwidth (channel spacing).\nThe value of this object value is computed by:\n   65536*modulation+bandwidth\n where bandwidth selection is:\n   0 = 3.5Mhz\n   1 = 7MHz\n   2 = 14MHz\n   3 = 28MHz\n   4 = 56MHz\n   5 = 10MHz\n   6 = 20MHz\n   7 = 30MHz\n   8 = 40MHz\n   9 = 50MHz\n  10 = 112Mhz\n  11 = 250Mhz\n  12 = 500Mhz\n  13 = 750Mhz\n  14 = 1Ghz\n and modulation is (bit-per-symbol):\n   1 = BPSK\n   2 = 4QAM\n   3 = 8PSK\n   4 = 16QAM\n   5 = 32QAM\n   6 = 64QAM\n   7 = 128QAM\n   8 = 256QAM\n   9 = 512QAM\n  10 = 1024QAM\n  11 = 2048QAM.\n\n Examples:\n 250Mhz-4QAM  (131083),\n 500Mhz-4QAM  (131084),\n 250Mhz-16QAM (262155),\n 500Mhz-64QAM (393228).\n\n Note: 0 bit-per-symbol is not possible,\n so value 0 is used for\n BandwidthAndModulation unassigned.")
radioEquipTxUpperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipTxUpperProfile.setDescription("The object (and radioEquipTxLowerProfile object) is used to restrict the TX profile range used when ACM is enabled.")
radioEquipTxLowerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipTxLowerProfile.setDescription("The object (and radioEquipTxUpperProfile object) is used to restrict the TX profile range used when ACM is enabled.")
radioEquipMaxBandwidthDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("fullBand", 1), ("halfBand", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipMaxBandwidthDivisor.setDescription("This object excludes/includes the half-band profile at the lower modulation.")
radioEquipAcmEngineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipAcmEngineEnable.setDescription("This object is used to enable/disable the ACM engine")
radioEquipAcmPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("constant", 1), ("ramp", 2), ("max", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipAcmPowerMode.setDescription("This object sets the power mode of the radio system.\nConstant means not variable through modulations\nRamp means that increases from the upper profile to the reference profile\nMax means that IF-Radio combination is maximized.")
radioEquipAcmPowerModeMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmPowerModeMap.setDescription("The object is used to get the acm power modes supported,\nIt is structured as bitmap, each bit active means mode supported.\nThese modes are listed in radioEquipAcmPowerMode leaf.\nFor example if you need to know if mode (x) is supported,\nit's enough to test (1<<(x))&radioEquipAcmPowerModeMap,\nthe mode is supported in case test result is not 0")
radioEquipReducedCapacityAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 12), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipReducedCapacityAlarm.setDescription("The equipment works in reduced capacity")
radioEquipAcmRxProfileInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmRxProfileInUse.setDescription("This object reports the ACM profile number in use in the radio Rx.\nIt is the radioEquipAcmProfileId of radioEquipAcmTable.\nLabel is radioEquipAcmProfileLabel from radioEquipAcmTable")
radioEquipAcmTxProfileInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmTxProfileInUse.setDescription("This object reports the ACM profile number in use in the radio Tx.\nIt is the radioEquipAcmProfileId of radioEquipAcmTable.\nLabel is radioEquipAcmProfileLabel from radioEquipAcmTable")
radioEquipAcmRxProfInUseLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmRxProfInUseLabel.setDescription("ASCII string used to describe current acm rx profile")
radioEquipAcmTxProfInUseLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmTxProfInUseLabel.setDescription("ASCII string used to describe current acm tx profile")
radioEquipCurrentTxETHCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 17), Integer32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipCurrentTxETHCapacity.setDescription("This object reports (in Kbits/sec) the transmitted payload capacity used by the Ethernet")
radioEquipCurrentRxETHCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 18), Integer32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipCurrentRxETHCapacity.setDescription("This object reports (in Kbits/sec) the received payload capacity used by the Ethernet")
radioEquipAcmRxModulationInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 19), BitsPerSymbol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmRxModulationInUse.setDescription("This object is the type of modulation of the Rx profile in use.")
radioEquipAcmTxModulationInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 20), BitsPerSymbol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmTxModulationInUse.setDescription("This object is the type of modulation of the Tx profile in use.")
radioEquipAcmRxCodeInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("strong", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmRxCodeInUse.setDescription("This object is the type of codificator of the Rx profile in use.")
radioEquipAcmTxCodeInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("strong", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmTxCodeInUse.setDescription("This object is the type of codificator of the Tx profile in use.")
radioEquipLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipLinkId.setDescription("Link Identification (value 0..255)")
radioEquipLinkTelemetryFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 24), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipLinkTelemetryFailAlarm.setDescription("Fail of link telemetry communication channel with associated Severity")
radioEquipLinkIdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 25), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipLinkIdAlarm.setDescription("Link Identification Alarm  with associated Severity")
radioEquipTxPwrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipTxPwrThresh.setDescription("Threshold (value +3 , +15 dB) relative to nominal value of the TX power\nbelow wich the related alarm is set.")
radioEquipRxPwrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -40)).clone(-70)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipRxPwrThresh.setDescription("Threshold (value -40 , -99 dBm) for RX power below wich the related\nalarm is set.")
radioEquipPermanentTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipPermanentTDMCapacity.setDescription("This object significative onis used to set the maximum capacity that can be\nassigned to the permanent TDM traffic.\nThe capacity is changed in steps of E1 (2Mbit/s).\n\nThe maximum value of this object must be the minimum between 82\nand the value of radioEquipAcmMaxTDMCapacity.")
radioEquipE1TypeActionRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 29), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,3,2,)).subtype(namedValues=NamedValues(("unknown", 0), ("active", 1), ("unframed", 2), ("framed", 3), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipE1TypeActionRequest.setDescription("It defines if all the E1s of the selected radio direction are\nframed.")
radioEquipCurrentTxTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipCurrentTxTDMCapacity.setDescription("This object reports the number of transmitted E1 in the payload capacity.")
radioEquipCurrentRxTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipCurrentRxTDMCapacity.setDescription("This object reports the number of received E1 in the payload capacity.")
radioEquipRxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 32), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipRxAisAlarm.setDescription("Ais insertion on all RX tributary signal  with associated Severity")
radioEquipDemultiplexerFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 33), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipDemultiplexerFailAlarm.setDescription("Fail of Demultiplexer  with associated Severity")
radioEquipMultiplexerFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 34), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipMultiplexerFailAlarm.setDescription("Fail of Multiplexer  with associated Severity")
radioEquipTxRevertiveSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 35), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("auto", 1), ("branch1", 2), ("branch2", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipTxRevertiveSwitch.setDescription("Transmitter Manual switch enable (only if 1+1 configuration and\nISO system))")
radioEquipRevertiveSwitchWTR = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipRevertiveSwitchWTR.setDescription("Wait Time (in seconds) to Restore the preferential radio branch\n0 value means WTR disable (only if 1+1 configuration and\nISO system). ")
radioEquipQualityLowRxSw = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 37), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipQualityLowRxSw.setDescription("Enable radioBranchRxQualityLowAlarm as switching criterion\n(only in 1+1 configuration)")
radioEquipRevertiveAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 38), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipRevertiveAlarm.setDescription("The Alarm is set when the reserve RadioBranch is selected in\npreferential mode (only if 1+1 configuration and\nISO system).")
radioEquipTFCControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 39), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipTFCControl.setDescription("It enables the Tx switch from remote equipment (only if 1+1\nconfiguration and ISO system).")
radioEquipTFCWatchWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipTFCWatchWindow.setDescription("Watch Window (in seconds) related to Trasmission Fail Check\nalgorithm (only if 1+1 configuration and ISO system).")
radioEquipTFCAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipTFCAlarmThreshold.setDescription("Alarm Threshold (number of seconds with both remote RX in fail)\nrelated to Trasmission Fail Check algorithm (only if 1+1\nconfiguration and ISO system).")
radioEquipTFCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 42), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipTFCAlarm.setDescription("Transmission switch alarm generated by Trasmission Fail Check algorithm\n(only if 1+1 configuration and ISO system).")
radioEquipRadioEocLinkAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 43), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipRadioEocLinkAlarm.setDescription("Fail of Radio Eoc link communication channel with associated Severity")
radioEquipRescueModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 44), BitsPerSymbol().clone('bps4QAM')).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipRescueModulation.setDescription("This object is the modulation used when the remote terminal is\nunreachable, ie traffic on radio link is down.")
radioEquipSetupMismatchAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 45), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipSetupMismatchAlarm.setDescription("The local setup doesn't match the setup of remote terminal")
radioEquipRescueSetupAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 46), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipRescueSetupAlarm.setDescription("The equipment is using the setup relative to the rescue modulation")
radioEquipXpicProcedureBlockAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 47), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipXpicProcedureBlockAlarm.setDescription("Only for XPIC equipment configurations.\nEquipment Controller XPIC procedure Alarm control with associated Severity")
radioEquipXpicRemTxOffAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 48), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipXpicRemTxOffAlarm.setDescription("Only for XPIC equipment configurations.\nRemote TX OFF command with associated Severity")
radioEquipSynchSetupProtocolEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 49), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipSynchSetupProtocolEnable.setDescription("Synchronization Setup Protocol (SSP) control")
radioEquipSdhBulkTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 50), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("disable", 1), ("stm1-1", 2), ("stm1-2", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipSdhBulkTransport.setDescription("This object defines which sdh tributary is carried trasparently\non this radio direction.")
radioEquipRSSIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 51), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipRSSIEnable.setDescription("It enable the RSSI feature")
radioEquipProfilesSetSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 4, 1, 52), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("highThroughput", 1), ("highGain", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioEquipProfilesSetSelection.setDescription("Selection of the working profile set between high gain\n(max robustness) profile set and high throughput (max\ncapacity) profile set. The set of profiles high gain\nfeatures a greater robustness against to the set of\nprofiles high throughput.\nFor radio systems that do not have more sets of profiles,\nthis object becomes read only and its reading shows the \nonly one set of profiles supported.")
radioEquipMcmTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 5))
if mibBuilder.loadTexts: radioEquipMcmTable.setDescription("This table contains MIB object to control the MCM feature.\nAn Instance of this table is created for each radioEquipRecord")
radioEquipMcmRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 5, 1)).setIndexNames((0, "SIAE-RAEQ-MIB", "radioEquipId"))
if mibBuilder.loadTexts: radioEquipMcmRecord.setDescription("Radio equipment Maintenance record.")
radioEquipMCMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipMCMEnable.setDescription("This object is used to enable/disable the MCM (MW capacity\nmanagement). It's an encoded bitmap of 4 bits:\n0 (mask 0x01) -> enables sending MCM message on LAN-1\n1 (mask 0x02) -> enables sending MCM message on LAN-2\n2 (mask 0x04) -> enables sending MCM message on LAN-3\n3 (mask 0x08) -> enables sending MCM message on LAN-4.")
radioEquipMCMTxVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipMCMTxVlanId.setDescription("This object is used to configure the tx pkt. If the object\nhas got a not zero value the MCM tx pkt is sent with the\nspecified vlan identifier.")
radioEquipMCMTxOAMMaintLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipMCMTxOAMMaintLevel.setDescription("This object defines the OAM maintenance level of the tx\npkt. It changes the multicast address of the pkt.")
radioEquipMCMFadingHoldOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipMCMFadingHoldOff.setDescription("This object defines the time, in seconds, from which\nthe protocol starts sending pkts if the fading is active.")
radioEquipMCMTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 5, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("s1", 1), ("s10", 2), ("s60", 3), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipMCMTxPeriod.setDescription("This object defines the time period, in seconds, between\na pkt is sent.")
radioEquipMCMCurrentBWTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 5, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("average", 1), ("min", 2), ("max", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipMCMCurrentBWTxType.setDescription("This object defines the type of the current tx BW.\nThis info is sent inside the pkt.")
radioEquipMaintTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 6))
if mibBuilder.loadTexts: radioEquipMaintTable.setDescription("Table with Command for maintenance of radio equipment.\nObjects in this table is not persistent. An Instance of this\ntable is created on creation of radioEquipRecord")
radioEquipMaintRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 6, 1)).setIndexNames((0, "SIAE-RAEQ-MIB", "radioEquipId"))
if mibBuilder.loadTexts: radioEquipMaintRecord.setDescription("Radio equipment Maintenance record.")
radioEquipForceLocalTxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipForceLocalTxProfile.setDescription("This object forces the specified Tx profile on the local terminal.\nThis is a manual operation.\n0 means No forced profile,\nother values are the radioEquipAcmProfileId of radioEquipAcmTable.\nLabel is radioEquipAcmProfileLabel from radioEquipAcmTable. ")
radioEquipForceRemoteTxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipForceRemoteTxProfile.setDescription("This object forces the specified Tx profile on the remote terminal.\nThis is a manual operation.\n0 means No forced profile,\nother values are the radioEquipAcmProfileId of radioEquipAcmTable.\nLabel is radioEquipAcmProfileLabel from radioEquipAcmTable. ")
radioEquipRxForcedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 6, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("auto", 1), ("branch1", 2), ("branch2", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipRxForcedSwitch.setDescription("Receiver Forced switch enable (only if 1+1 configuration).\nThis item is linked to a manual operation (ManOpRecord) instance.")
radioEquipTxForcedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 6, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("auto", 1), ("branch1", 2), ("branch2", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipTxForcedSwitch.setDescription("Transmitter Forced switch enable (only if 1+1 configuration and\nISO system).\nThis item is linked to a manual operation (ManOpRecord) instance.")
radioEquipRevertiveSwitchWTRReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 6, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("inactive", 0), ("reset", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipRevertiveSwitchWTRReset.setDescription("Reset the wait time to restore forcing the return to the\npreferetial radio branch (only if 1+1 configuration and\nISO system).")
radioEquipTFCActionRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 6, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("inactive", 0), ("reset", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipTFCActionRequest.setDescription("reset: to clear the forced switch generated by Trasmission Fail\nCheck algorithm (only if 1+1 configuration and ISO system).")
radioEquipBerStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 6, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("restart", 1), ("stop", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipBerStart.setDescription("Stop, Start (resetting errors and counters) the pattern.\nThis item is linked to a manual operation (ManOpRecord) instance.")
radioEquipScanningStartCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 6, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipScanningStartCmd.setDescription("It enable the scanning start feature")
radioEquipBerTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 7))
if mibBuilder.loadTexts: radioEquipBerTable.setDescription("Table with Command to estimate BER  of radio equipment.\nEvery objects in this table is not persistent. An Instance of this\ntable is created on creation of radioEquipRecord")
radioEquipBerRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 7, 1)).setIndexNames((0, "SIAE-RAEQ-MIB", "radioEquipId"))
if mibBuilder.loadTexts: radioEquipBerRecord.setDescription("Radio equipment BER estimate record.")
radioEquipBerErrorCounterH = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipBerErrorCounterH.setDescription("64Bit error counter. Bit 32-63.")
radioEquipBerErrorCounterL = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipBerErrorCounterL.setDescription("64Bit error counter. Bit 0-31.")
radioEquipBerDataCounterH = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipBerDataCounterH.setDescription("64Bit data counter. Bit 32-63.")
radioEquipBerDataCounterL = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipBerDataCounterL.setDescription("64Bit data counter. Bit 0-31.")
radioEquipBerSyncLossAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 7, 1, 5), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipBerSyncLossAlarm.setDescription("BER sync loss alarm.")
radioEquipBerSyncLossAlarmCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipBerSyncLossAlarmCounter.setDescription("BER sync loss events counter.")
radioEquipBerElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipBerElapsedTime.setDescription("BER measure elapsed time.")
radioEquipScanTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 8))
if mibBuilder.loadTexts: radioEquipScanTable.setDescription("Table with command for frequency scan.\nSome objects in this table is persistent. An Instance of this\ntable is created on creation of radioEquipRecord")
radioEquipScanRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 8, 1)).setIndexNames((0, "SIAE-RAEQ-MIB", "radioEquipId"))
if mibBuilder.loadTexts: radioEquipScanRecord.setDescription("Radio equipment BER estimate record.")
radioEquipScanningFreqMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 8, 1, 1), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipScanningFreqMin.setDescription("It define the scanning min frequency (KHz)")
radioEquipScanningFreqMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 8, 1, 2), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipScanningFreqMax.setDescription("It define the scanning max frequency (KHz)")
radioEquipScanningFreqStep = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 8, 1, 3), Integer32().clone(7000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipScanningFreqStep.setDescription("It define the scanning step frequency (KHz)")
radioEquipScanningFreqTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 8, 1, 4), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipScanningFreqTime.setDescription("It define the scanning time frequency (sec)")
radioEquipScanningPercentageProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipScanningPercentageProgress.setDescription("It define the percentage of the scanning measurement")
radioEquipAcmTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9))
if mibBuilder.loadTexts: radioEquipAcmTable.setDescription("Table with radioEquip records.")
radioEquipAcmRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1)).setIndexNames((0, "SIAE-RAEQ-MIB", "radioEquipAcmId"), (0, "SIAE-RAEQ-MIB", "radioEquipAcmProfileId"))
if mibBuilder.loadTexts: radioEquipAcmRecord.setDescription("radioEquip records. The record indexed with radioEquipAcmProfileId\nequal to default-acm-profile (1) contains the default value fo the\nradio equipment.")
radioEquipAcmId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,3,)).subtype(namedValues=NamedValues(("radioEq1A", 1), ("radioEq2A", 2), ("radioEq1B", 3), ("radioEq2B", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmId.setDescription("It identifies the radio in n*(1+0) or n*(1+1) configuration.")
radioEquipAcmProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmProfileId.setDescription("This object identifies the profile number for the radio selected\nby the object radioEquipAcmId.")
radioEquipAcmProfileCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmProfileCapacity.setDescription("This object is used to contain total capacity of profile (in Kbits/sec).")
radioEquipAcmMaxTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 4), Integer32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmMaxTDMCapacity.setDescription("This object is used to inform about the maximum capacity that can\nbe assigned to the TDM (permanent+extra) traffic.\nThe capacity is specified in number of E1 (2Mbit/s)")
radioEquipAcmPowerScaling = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmPowerScaling.setDescription("This object contains the difference (in eighth of dB) between the\nTX power at this profile modulation and the TX power at the\nreference modulation. The power scaling value is achieved from the\ntable radioEquipPtxProfileTable.")
radioEquipAcmExtraE1TDM = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipAcmExtraE1TDM.setDescription("This object is used to set the maximum number of E1 (2Mbit/s) that\ncan be assigned to the extra TDM traffic. The extra TDM traffic\ncapacity can change between different ACM profiles.")
radioEquipAcmActiveProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,1,)).subtype(namedValues=NamedValues(("cleared", 1), ("activeRx", 2), ("activeTx", 3), ("activeBoth", 4), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmActiveProfile.setDescription("This object is used to contain the active status of this profile.\nThe value of the object is related to radioEquipAcmRxProfileInUse\nand radioEquipAcmTxProfileInUse of the RadioEquipRecord.")
radioEquipAcmProfileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmProfileEnable.setDescription("The object is used to contain if the use of this profile is\nenabled or disabled")
radioEquipAcmDownshiftThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmDownshiftThreshold.setDescription("The object is used to contain the downshift threshold in dB/10.")
radioEquipAcmUpshiftThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmUpshiftThreshold.setDescription("The object is used to contain the upshift threshold in dB/10.")
radioEquipAcmPermanentTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmPermanentTDMCapacity.setDescription("This object is used to contain permanent TDM capacity (in bits/sec)\nof the profile.")
radioEquipAcmExtraTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmExtraTDMCapacity.setDescription("This object is used to contain extra TDM capacity (in bits/sec) of\nthe profile.")
radioEquipAcmETHCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmETHCapacity.setDescription("This object is used to contain ETH capacity (in Kbits/sec) of\nthe profile.")
radioEquipAcmAtpcRxPowerScaling = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmAtpcRxPowerScaling.setDescription("This object contains the difference (in eighth of dB) between the\nATPC RX level thresholds at this profile modulation and the ATPC\nRX level thresholds at the upper modulation.")
radioEquipAcmProfileLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipAcmProfileLabel.setDescription("ASCII string used to assign a name to profile.")
radioEquipAcmProfileModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 16), BitsPerSymbol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmProfileModulation.setDescription("This object is the modulation of the profile.")
radioEquipAcmProfileCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("normal", 1), ("strong", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmProfileCode.setDescription("This object is the type of codificator of the profile.")
radioEquipAcmPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 9, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipAcmPowerRange.setDescription("This object contains (in dB) the current value of ATPC range.")
radioEquipLinkTelemetryFailAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 10), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipLinkTelemetryFailAlarmSeverityCode.setDescription("Define the severity associated to the LinkTelemetryFailAlarm\nand enable/disable the trap generation on status change event.")
radioEquipLinkIdAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 11), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipLinkIdAlarmSeverityCode.setDescription("Define the severity associated to theLink Id Fail Alarm\nand enable/disable the trap generation on status change event.")
radioEquipReducedCapacityAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 12), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipReducedCapacityAlarmSeverityCode.setDescription("Define the severity associated to the radioEquipReducedCapacityAlarm\nand enable/disable the trap generation on status change event.")
radioEquipEowCAIEnable = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipEowCAIEnable.setDescription("Eow Ring Integrity Check enable")
radioEquipEowMasterTerminal = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipEowMasterTerminal.setDescription("EOW - The Equipment is the master in a ring")
radioEquipEowEnableV11EastSide = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipEowEnableV11EastSide.setDescription("Eow enable V11 east side")
radioEquipEowEnableV11WestSide = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipEowEnableV11WestSide.setDescription("Eow enable V11 West side")
radioEquipEowExtPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipEowExtPortEnable.setDescription("Eow external  Port enable")
radioEquipEowExtOperatorEnable = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipEowExtOperatorEnable.setDescription("Eow external Operator enable")
radioEquipAisRxInsertion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipAisRxInsertion.setDescription("AIS insertion receiver side enable")
radioEquipServiceSquelchEnable = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipServiceSquelchEnable.setDescription("Service Squelch  enable")
radioEquipCAIAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 21), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipCAIAlarmSeverityCode.setDescription("Define the severity associated to Ring Integrity Check Alarm and enable/disable\nthe trap generation on status change event.")
radioEquipComprFragmMismatchAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 22), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipComprFragmMismatchAlarmSeverityCode.setDescription("Define the severity associated to the radioEquipComprFragmMismatchAlarm\nand enable/disable the trap generation on status change event.")
radioEquipAisAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 23), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipAisAlarmSeverityCode.setDescription("Define the severity associated to the  RxAIsAlarm  and\nenable/disable the trap generation on status change event.")
radioEquipDemultiplexerFailAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 24), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipDemultiplexerFailAlarmSeverityCode.setDescription("Define the severity associated to the DemultiplexerFailAlarm  and\nenable/disable the trap generation on status change event.")
radioEquipMultiplexerFailAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 25), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipMultiplexerFailAlarmSeverityCode.setDescription("Define the severity associated to the MultiplexerFailAlarm  and\nenable/disable the trap generation on status change event.")
radioEquipRadioEocLinkAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 26), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipRadioEocLinkAlarmSeverityCode.setDescription("Define the severity associated to the RadioEocLinkAlarm\nand enable/disable the trap generation on status change event.")
radioEquip2MbEocLinkAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 27), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquip2MbEocLinkAlarmSeverityCode.setDescription("Define the severity associated to the 2MbEocLinkAlarm\nand enable/disable the trap generation on status change event.")
radioEquipRevertiveAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 28), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipRevertiveAlarmSeverityCode.setDescription("Define the severity associated to the radioEquipRevertiveAlarm\nand enable/disable the trap generation on status change event.")
radioEquipTFCAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 29), AlarmSeverityCode().clone('minorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipTFCAlarmSeverityCode.setDescription("Define the severity associated to the radioEquipTFCAlarm\nand enable/disable the trap generation on status change event.")
radioEquipSetupMismatchAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 30), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipSetupMismatchAlarmSeverityCode.setDescription("Define the severity associated to the Setup Mismatch Alarm and\nenable/disable the trap generation on status change event.")
radioEquipRescueSetupAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 31), AlarmSeverityCode().clone('criticalTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipRescueSetupAlarmSeverityCode.setDescription("Define the severity associated to the Rescue Setup Alarm and\nenable/disable the trap generation on status change event.")
radioEquipOnePlusOnePreferential = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 32), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("disable", 1), ("main", 2), ("reserve", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOnePreferential.setDescription("2*(1+1) Xpic Preferential selection.")
radioEquipOnePlusOneStatusSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 33), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("trapDisable", 1), ("trapEnable", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOneStatusSeverityCode.setDescription("Define the severity associated to the radioEquipOnePlusOneStatus and\nenable/disable the trap generation on status change event.")
radioEquipOnePlusOneMismatchAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 34), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOneMismatchAlarmSeverityCode.setDescription("Define the severity associated to the radioEquipOnePlusOneMismatchAlarm\nand enable/disable the trap generation on status change event.")
radioEquipOnePlusOneTwinFailAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 35), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOneTwinFailAlarmSeverityCode.setDescription("Define the severity associated to the radioEquipOnePlusOneTwinFailAlarm\nand enable/disable the trap generation on status change event.")
radioEquipXpicControlProcedure = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 36), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipXpicControlProcedure.setDescription("Set by manager to enable\disable XPIC alarm control procedure.\nOnly for XPIC equipment configurations.")
radioEquipXpicProcedureBlockAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 37), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipXpicProcedureBlockAlarmSeverityCode.setDescription("Define the severity associated to XPIC procedure block\nAlarm and enable/disable the trap generation on status change event.\nOnly for XPIC equipment configurations.")
radioEquipXpicRemTxOffAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 38), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipXpicRemTxOffAlarmSeverityCode.setDescription("Define the severity associated to XPIC rem Tx Off Alarm\nand enable/disable the trap generation on status change event.\nOnly for XPIC equipment configurations.")
radioEquipConcatenationAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 39), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipConcatenationAlarmSeverityCode.setDescription("Define the severity associated to the radioEquipConcatenationAlarm\nand enable/disable the trap generation on status change event.")
radioEquipOnePlusOnePreferentialWTR = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOnePreferentialWTR.setDescription("Wait Time (in seconds) to Restore the preferential equipment\n0 value means WTR disable. It is meaningfull only in\n2*(1+1)Xpic configuration.")
radioEquipOnePlusOnePreferentialAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 41), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOnePreferentialAlarmSeverityCode.setDescription("Define the severity associated to the OnePlusOnePreferentialAlarm\nand enable/disable the trap generation on status change event.")
radioEquipOnePlusOneTFCControl = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 42), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOneTFCControl.setDescription("It enables the Tx switch from remote equipment (only in\n2*(1+1)Xpic configuration).")
radioEquipOnePlusOneTFCWatchWindow = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOneTFCWatchWindow.setDescription("Watch Window (in seconds) related to Trasmission Fail Check\nalgorithm (only in 2*(1+1)Xpic configuration).")
radioEquipOnePlusOneTFCAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOneTFCAlarmThreshold.setDescription("Alarm Threshold (number of seconds with both remote RX in fail)\nrelated to Trasmission Fail Check algorithm (only in 2*(1+1)Xpic\nconfiguration).")
radioEquipOnePlusOneTFCAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 45), AlarmSeverityCode().clone('minorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOneTFCAlarmSeverityCode.setDescription("Define the severity associated to the radioEquipOnePlusOneTFCAlarm\nand enable/disable the trap generation on status change event.")
radioEquipFadeMarginMeasure = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 46), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notRunning", 1), ("running", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipFadeMarginMeasure.setDescription("Set by manager before/end to start/stop fade margin measure")
radioEquipPeripheralLom = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 47), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,16,24,6,2,8,30,)).subtype(namedValues=NamedValues(("disable", 1), ("enableRadio2B", 16), ("enableRadio1A", 2), ("enableRadioB", 24), ("enableRadioAll", 30), ("enableRadio2A", 4), ("enableRadioA", 6), ("enableRadio1B", 8), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipPeripheralLom.setDescription("Peripheral LOM Enable. It is used to enable the IP packet forwarding\ntowards selected Radio microcontrollers. It is structured as bitmap:\n - bit 0 = disable\n - bit 1 = radio 1A\n - bit 2 = radio 2A\n - bit 3 = radio 1B\n - bit 4 = radio 2B.")
radioEquipCAIAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 48), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipCAIAlarm.setDescription("Ring Integrity Check Alarm with associated Severity")
radioEquipComprFragmMismatchAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 49), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipComprFragmMismatchAlarm.setDescription("Compression mismatch alarm status and severity.\nIt is set when the configuration of compression is different\non the link.")
radioEquipBaseBandLom = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 50), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,16,24,6,2,8,30,)).subtype(namedValues=NamedValues(("disable", 1), ("enableRadio2B", 16), ("enableRadio1A", 2), ("enableRadioB", 24), ("enableRadioAll", 30), ("enableRadio2A", 4), ("enableRadioA", 6), ("enableRadio1B", 8), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipBaseBandLom.setDescription("This object is used to route IP packets, received from Base-band LOM,\nto selected modem.")
radioEquipOnePlusOneLocalStatus = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 51), Integer().subtype(subtypeSpec=SingleValueConstraint(2,6,7,1,5,4,3,)).subtype(namedValues=NamedValues(("active", 1), ("standby", 2), ("activeAlarmed", 3), ("standbyAlarmed", 4), ("forcedActive", 5), ("forcedActiveAlarmed", 6), ("maintenance", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipOnePlusOneLocalStatus.setDescription("2*(1+1) Xpic conf. Local status")
radioEquipOnePlusOneTwinStatus = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 52), Integer().subtype(subtypeSpec=SingleValueConstraint(2,6,7,1,5,4,8,3,)).subtype(namedValues=NamedValues(("active", 1), ("standby", 2), ("activeAlarmed", 3), ("standbyAlarmed", 4), ("forcedActive", 5), ("forcedActiveAlarmed", 6), ("maintenance", 7), ("unknown", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipOnePlusOneTwinStatus.setDescription("2*(1+1) Xpic conf. Twin status")
radioEquipOnePlusOneForcedSwitch = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 53), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("disable", 1), ("forced", 2), ("forcedMaintenance", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOneForcedSwitch.setDescription("2*(1+1) Xpic conf. Local forced switch.")
radioEquipOnePlusOneStatus = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 54), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("cleared", 1), ("active", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipOnePlusOneStatus.setDescription("Active status with associated Severity.\nIts active when the local status is equal to\nactive or forced  active , active alarmed or\nforced active alarmed. ")
radioEquipOnePlusOneMismatchAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 55), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipOnePlusOneMismatchAlarm.setDescription("Configuration mismatch alarm status and severity.")
radioEquipOnePlusOneMismatchMap = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipOnePlusOneMismatchMap.setDescription("Bit map to report the mismatch found on the json (Mib object) files")
radioEquipOnePlusOneTwinFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 57), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipOnePlusOneTwinFailAlarm.setDescription("Twin Fail  alarm status and severity.")
radioEquipOnePlusOneNumberOfSwitch = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipOnePlusOneNumberOfSwitch.setDescription("Number of Switch. Set 0 value to clear the counter")
radioEquipXpicControlResetProcedure = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 59), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("inactive", 0), ("reset", 1), )).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipXpicControlResetProcedure.setDescription("Set by manager to reset the XPIC control procedure after a\nblocking action.")
radioEquipConcatenationAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 60), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipConcatenationAlarm.setDescription("Concatenation alarm status and severity.")
radioEquipOnePlusOnePreferentialWTRReset = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 61), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("inactive", 0), ("reset", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOnePreferentialWTRReset.setDescription("Reset the wait time to restore forcing the return to the\npreferetial equipment. It is meaningfull only in 2*(1+1)Xpic\nconfiguration.")
radioEquipOnePlusOnePreferentialAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 62), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipOnePlusOnePreferentialAlarm.setDescription("The Alarm is set when the preferred equipment isn't active.\nIt is meaningfull only in 2*(1+1)Xpic configuration.")
radioEquipOnePlusOneTFCActionRequest = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 63), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("inactive", 0), ("reset", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipOnePlusOneTFCActionRequest.setDescription("Reset: to clear the forced switch generated by Trasmission Fail\nCheck algorithm (only in 2*(1+1)Xpic configuration).")
radioEquipOnePlusOneTFCAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 64), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipOnePlusOneTFCAlarm.setDescription("Transmission switch alarm generated by Trasmission Fail Check algorithm\n(only in 2*(1+1)Xpic configuration).")
radioEquipFeatureTDMpresence = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 65), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("dynamicOnly", 2), ("permanentOnly", 3), ("bothPresent", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipFeatureTDMpresence.setDescription("The object is used to get the TDM support,\nboth-supported means that are present both permanent and dynamic TDM")
radioEquipFeatureMisc = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipFeatureMisc.setDescription("The object is used to get a group of features support,\nIt is structured as bitmap,\neach bit active means feature supported.\n\nbit0  = TFC\nbit1  = EOCRadio\nbit2  = EOC2Mb\nbit3  = RescueModulation\nbit4  = SynchSetupProtocol\nbit5  = SdhBulkTransport\nbit6  = GFPBer\nbit7  = RSSI\nbit8  = ScanFreq\nbit9  = EOW\nbit10 = HybridProfile\nbit11 = Prbs\nbit12 = 2MbG704\nbit13 = LimTable")
radioEquipFeatureXpic = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 67), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notSupported", 1), ("supported", 2), ("enhanced", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEquipFeatureXpic.setDescription("The object is used to get the Xpic support.\nEnhanced means Xpic-alarm-procedure supported too.")
radioEquipBerSyncLossAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 15, 68), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEquipBerSyncLossAlarmSeverityCode.setDescription("Define the severity associated to the radioEquipBerSyncLossAlarm\nand enable/disable the trap generation on status change event.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("SIAE-RAEQ-MIB", PYSNMP_MODULE_ID=radioEquip)

# Types
mibBuilder.exportSymbols("SIAE-RAEQ-MIB", BitsPerSymbol=BitsPerSymbol, InterfaceIndexOrZero=InterfaceIndexOrZero)

# Objects
mibBuilder.exportSymbols("SIAE-RAEQ-MIB", radioEquip=radioEquip, radioEquipMibVersion=radioEquipMibVersion, radioEquipSystem=radioEquipSystem, radioEquipFeatureSystemMap=radioEquipFeatureSystemMap, radioEquipTable=radioEquipTable, radioEquipRecord=radioEquipRecord, radioEquipId=radioEquipId, radioEquipRowStatus=radioEquipRowStatus, radioEquipIfIndex=radioEquipIfIndex, radioEquipLabel=radioEquipLabel, radioEquipBandwidthAndModulation=radioEquipBandwidthAndModulation, radioEquipTxUpperProfile=radioEquipTxUpperProfile, radioEquipTxLowerProfile=radioEquipTxLowerProfile, radioEquipMaxBandwidthDivisor=radioEquipMaxBandwidthDivisor, radioEquipAcmEngineEnable=radioEquipAcmEngineEnable, radioEquipAcmPowerMode=radioEquipAcmPowerMode, radioEquipAcmPowerModeMap=radioEquipAcmPowerModeMap, radioEquipReducedCapacityAlarm=radioEquipReducedCapacityAlarm, radioEquipAcmRxProfileInUse=radioEquipAcmRxProfileInUse, radioEquipAcmTxProfileInUse=radioEquipAcmTxProfileInUse, radioEquipAcmRxProfInUseLabel=radioEquipAcmRxProfInUseLabel, radioEquipAcmTxProfInUseLabel=radioEquipAcmTxProfInUseLabel, radioEquipCurrentTxETHCapacity=radioEquipCurrentTxETHCapacity, radioEquipCurrentRxETHCapacity=radioEquipCurrentRxETHCapacity, radioEquipAcmRxModulationInUse=radioEquipAcmRxModulationInUse, radioEquipAcmTxModulationInUse=radioEquipAcmTxModulationInUse, radioEquipAcmRxCodeInUse=radioEquipAcmRxCodeInUse, radioEquipAcmTxCodeInUse=radioEquipAcmTxCodeInUse, radioEquipLinkId=radioEquipLinkId, radioEquipLinkTelemetryFailAlarm=radioEquipLinkTelemetryFailAlarm, radioEquipLinkIdAlarm=radioEquipLinkIdAlarm, radioEquipTxPwrThresh=radioEquipTxPwrThresh, radioEquipRxPwrThresh=radioEquipRxPwrThresh, radioEquipPermanentTDMCapacity=radioEquipPermanentTDMCapacity, radioEquipE1TypeActionRequest=radioEquipE1TypeActionRequest, radioEquipCurrentTxTDMCapacity=radioEquipCurrentTxTDMCapacity, radioEquipCurrentRxTDMCapacity=radioEquipCurrentRxTDMCapacity, radioEquipRxAisAlarm=radioEquipRxAisAlarm, radioEquipDemultiplexerFailAlarm=radioEquipDemultiplexerFailAlarm, radioEquipMultiplexerFailAlarm=radioEquipMultiplexerFailAlarm, radioEquipTxRevertiveSwitch=radioEquipTxRevertiveSwitch, radioEquipRevertiveSwitchWTR=radioEquipRevertiveSwitchWTR, radioEquipQualityLowRxSw=radioEquipQualityLowRxSw, radioEquipRevertiveAlarm=radioEquipRevertiveAlarm, radioEquipTFCControl=radioEquipTFCControl, radioEquipTFCWatchWindow=radioEquipTFCWatchWindow, radioEquipTFCAlarmThreshold=radioEquipTFCAlarmThreshold, radioEquipTFCAlarm=radioEquipTFCAlarm, radioEquipRadioEocLinkAlarm=radioEquipRadioEocLinkAlarm, radioEquipRescueModulation=radioEquipRescueModulation, radioEquipSetupMismatchAlarm=radioEquipSetupMismatchAlarm, radioEquipRescueSetupAlarm=radioEquipRescueSetupAlarm, radioEquipXpicProcedureBlockAlarm=radioEquipXpicProcedureBlockAlarm, radioEquipXpicRemTxOffAlarm=radioEquipXpicRemTxOffAlarm, radioEquipSynchSetupProtocolEnable=radioEquipSynchSetupProtocolEnable, radioEquipSdhBulkTransport=radioEquipSdhBulkTransport, radioEquipRSSIEnable=radioEquipRSSIEnable, radioEquipProfilesSetSelection=radioEquipProfilesSetSelection, radioEquipMcmTable=radioEquipMcmTable, radioEquipMcmRecord=radioEquipMcmRecord, radioEquipMCMEnable=radioEquipMCMEnable, radioEquipMCMTxVlanId=radioEquipMCMTxVlanId, radioEquipMCMTxOAMMaintLevel=radioEquipMCMTxOAMMaintLevel, radioEquipMCMFadingHoldOff=radioEquipMCMFadingHoldOff, radioEquipMCMTxPeriod=radioEquipMCMTxPeriod, radioEquipMCMCurrentBWTxType=radioEquipMCMCurrentBWTxType, radioEquipMaintTable=radioEquipMaintTable, radioEquipMaintRecord=radioEquipMaintRecord, radioEquipForceLocalTxProfile=radioEquipForceLocalTxProfile, radioEquipForceRemoteTxProfile=radioEquipForceRemoteTxProfile, radioEquipRxForcedSwitch=radioEquipRxForcedSwitch, radioEquipTxForcedSwitch=radioEquipTxForcedSwitch, radioEquipRevertiveSwitchWTRReset=radioEquipRevertiveSwitchWTRReset, radioEquipTFCActionRequest=radioEquipTFCActionRequest, radioEquipBerStart=radioEquipBerStart, radioEquipScanningStartCmd=radioEquipScanningStartCmd, radioEquipBerTable=radioEquipBerTable, radioEquipBerRecord=radioEquipBerRecord, radioEquipBerErrorCounterH=radioEquipBerErrorCounterH, radioEquipBerErrorCounterL=radioEquipBerErrorCounterL, radioEquipBerDataCounterH=radioEquipBerDataCounterH, radioEquipBerDataCounterL=radioEquipBerDataCounterL, radioEquipBerSyncLossAlarm=radioEquipBerSyncLossAlarm, radioEquipBerSyncLossAlarmCounter=radioEquipBerSyncLossAlarmCounter, radioEquipBerElapsedTime=radioEquipBerElapsedTime, radioEquipScanTable=radioEquipScanTable, radioEquipScanRecord=radioEquipScanRecord, radioEquipScanningFreqMin=radioEquipScanningFreqMin, radioEquipScanningFreqMax=radioEquipScanningFreqMax, radioEquipScanningFreqStep=radioEquipScanningFreqStep, radioEquipScanningFreqTime=radioEquipScanningFreqTime, radioEquipScanningPercentageProgress=radioEquipScanningPercentageProgress, radioEquipAcmTable=radioEquipAcmTable, radioEquipAcmRecord=radioEquipAcmRecord, radioEquipAcmId=radioEquipAcmId, radioEquipAcmProfileId=radioEquipAcmProfileId, radioEquipAcmProfileCapacity=radioEquipAcmProfileCapacity, radioEquipAcmMaxTDMCapacity=radioEquipAcmMaxTDMCapacity, radioEquipAcmPowerScaling=radioEquipAcmPowerScaling, radioEquipAcmExtraE1TDM=radioEquipAcmExtraE1TDM, radioEquipAcmActiveProfile=radioEquipAcmActiveProfile, radioEquipAcmProfileEnable=radioEquipAcmProfileEnable, radioEquipAcmDownshiftThreshold=radioEquipAcmDownshiftThreshold, radioEquipAcmUpshiftThreshold=radioEquipAcmUpshiftThreshold, radioEquipAcmPermanentTDMCapacity=radioEquipAcmPermanentTDMCapacity, radioEquipAcmExtraTDMCapacity=radioEquipAcmExtraTDMCapacity, radioEquipAcmETHCapacity=radioEquipAcmETHCapacity, radioEquipAcmAtpcRxPowerScaling=radioEquipAcmAtpcRxPowerScaling, radioEquipAcmProfileLabel=radioEquipAcmProfileLabel, radioEquipAcmProfileModulation=radioEquipAcmProfileModulation, radioEquipAcmProfileCode=radioEquipAcmProfileCode, radioEquipAcmPowerRange=radioEquipAcmPowerRange, radioEquipLinkTelemetryFailAlarmSeverityCode=radioEquipLinkTelemetryFailAlarmSeverityCode, radioEquipLinkIdAlarmSeverityCode=radioEquipLinkIdAlarmSeverityCode, radioEquipReducedCapacityAlarmSeverityCode=radioEquipReducedCapacityAlarmSeverityCode, radioEquipEowCAIEnable=radioEquipEowCAIEnable, radioEquipEowMasterTerminal=radioEquipEowMasterTerminal, radioEquipEowEnableV11EastSide=radioEquipEowEnableV11EastSide, radioEquipEowEnableV11WestSide=radioEquipEowEnableV11WestSide, radioEquipEowExtPortEnable=radioEquipEowExtPortEnable, radioEquipEowExtOperatorEnable=radioEquipEowExtOperatorEnable, radioEquipAisRxInsertion=radioEquipAisRxInsertion, radioEquipServiceSquelchEnable=radioEquipServiceSquelchEnable, radioEquipCAIAlarmSeverityCode=radioEquipCAIAlarmSeverityCode, radioEquipComprFragmMismatchAlarmSeverityCode=radioEquipComprFragmMismatchAlarmSeverityCode, radioEquipAisAlarmSeverityCode=radioEquipAisAlarmSeverityCode)
mibBuilder.exportSymbols("SIAE-RAEQ-MIB", radioEquipDemultiplexerFailAlarmSeverityCode=radioEquipDemultiplexerFailAlarmSeverityCode, radioEquipMultiplexerFailAlarmSeverityCode=radioEquipMultiplexerFailAlarmSeverityCode, radioEquipRadioEocLinkAlarmSeverityCode=radioEquipRadioEocLinkAlarmSeverityCode, radioEquip2MbEocLinkAlarmSeverityCode=radioEquip2MbEocLinkAlarmSeverityCode, radioEquipRevertiveAlarmSeverityCode=radioEquipRevertiveAlarmSeverityCode, radioEquipTFCAlarmSeverityCode=radioEquipTFCAlarmSeverityCode, radioEquipSetupMismatchAlarmSeverityCode=radioEquipSetupMismatchAlarmSeverityCode, radioEquipRescueSetupAlarmSeverityCode=radioEquipRescueSetupAlarmSeverityCode, radioEquipOnePlusOnePreferential=radioEquipOnePlusOnePreferential, radioEquipOnePlusOneStatusSeverityCode=radioEquipOnePlusOneStatusSeverityCode, radioEquipOnePlusOneMismatchAlarmSeverityCode=radioEquipOnePlusOneMismatchAlarmSeverityCode, radioEquipOnePlusOneTwinFailAlarmSeverityCode=radioEquipOnePlusOneTwinFailAlarmSeverityCode, radioEquipXpicControlProcedure=radioEquipXpicControlProcedure, radioEquipXpicProcedureBlockAlarmSeverityCode=radioEquipXpicProcedureBlockAlarmSeverityCode, radioEquipXpicRemTxOffAlarmSeverityCode=radioEquipXpicRemTxOffAlarmSeverityCode, radioEquipConcatenationAlarmSeverityCode=radioEquipConcatenationAlarmSeverityCode, radioEquipOnePlusOnePreferentialWTR=radioEquipOnePlusOnePreferentialWTR, radioEquipOnePlusOnePreferentialAlarmSeverityCode=radioEquipOnePlusOnePreferentialAlarmSeverityCode, radioEquipOnePlusOneTFCControl=radioEquipOnePlusOneTFCControl, radioEquipOnePlusOneTFCWatchWindow=radioEquipOnePlusOneTFCWatchWindow, radioEquipOnePlusOneTFCAlarmThreshold=radioEquipOnePlusOneTFCAlarmThreshold, radioEquipOnePlusOneTFCAlarmSeverityCode=radioEquipOnePlusOneTFCAlarmSeverityCode, radioEquipFadeMarginMeasure=radioEquipFadeMarginMeasure, radioEquipPeripheralLom=radioEquipPeripheralLom, radioEquipCAIAlarm=radioEquipCAIAlarm, radioEquipComprFragmMismatchAlarm=radioEquipComprFragmMismatchAlarm, radioEquipBaseBandLom=radioEquipBaseBandLom, radioEquipOnePlusOneLocalStatus=radioEquipOnePlusOneLocalStatus, radioEquipOnePlusOneTwinStatus=radioEquipOnePlusOneTwinStatus, radioEquipOnePlusOneForcedSwitch=radioEquipOnePlusOneForcedSwitch, radioEquipOnePlusOneStatus=radioEquipOnePlusOneStatus, radioEquipOnePlusOneMismatchAlarm=radioEquipOnePlusOneMismatchAlarm, radioEquipOnePlusOneMismatchMap=radioEquipOnePlusOneMismatchMap, radioEquipOnePlusOneTwinFailAlarm=radioEquipOnePlusOneTwinFailAlarm, radioEquipOnePlusOneNumberOfSwitch=radioEquipOnePlusOneNumberOfSwitch, radioEquipXpicControlResetProcedure=radioEquipXpicControlResetProcedure, radioEquipConcatenationAlarm=radioEquipConcatenationAlarm, radioEquipOnePlusOnePreferentialWTRReset=radioEquipOnePlusOnePreferentialWTRReset, radioEquipOnePlusOnePreferentialAlarm=radioEquipOnePlusOnePreferentialAlarm, radioEquipOnePlusOneTFCActionRequest=radioEquipOnePlusOneTFCActionRequest, radioEquipOnePlusOneTFCAlarm=radioEquipOnePlusOneTFCAlarm, radioEquipFeatureTDMpresence=radioEquipFeatureTDMpresence, radioEquipFeatureMisc=radioEquipFeatureMisc, radioEquipFeatureXpic=radioEquipFeatureXpic, radioEquipBerSyncLossAlarmSeverityCode=radioEquipBerSyncLossAlarmSeverityCode)

