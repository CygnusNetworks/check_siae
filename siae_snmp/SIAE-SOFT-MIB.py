# PySNMP SMI module. Autogenerated from smidump -f python SIAE-SOFT-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  8 13:59:04 2019,
# Python version sys.version_info(major=2, minor=7, micro=15, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( alarmTrap, ) = mibBuilder.importSymbols("SIAE-ALARM-MIB", "alarmTrap")
( equipIpSnmpAgentAddress, ) = mibBuilder.importSymbols("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress")
( siaeMib, ) = mibBuilder.importSymbols("SIAE-TREE-MIB", "siaeMib")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

software = ModuleIdentity((1, 3, 6, 1, 4, 1, 3373, 1103, 7)).setRevisions(("2015-03-23 00:00","2014-02-03 00:00","2013-04-16 00:00",))
if mibBuilder.loadTexts: software.setOrganization("SIAE MICROELETTRONICA spa")
if mibBuilder.loadTexts: software.setContactInfo("SIAE MICROELETTONICA s.p.a.\nVia Michelangelo Buonarroti, 21\n20093 - Cologno Monzese\nMilano - ITALY\nPhone :  +39-02-27325-1\nE-mail: help@siaemic.com")
if mibBuilder.loadTexts: software.setDescription("Maintenance of software releases loaded on SIAE equiment.")
softwareMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareMibVersion.setDescription("Numerical version of this module.\nThe string version of this MIB have the following format:\n   XX.YY.ZZ\nso, for example, the value 1 should be interpreted as 00.00.01\nand the value 10001 should be interpreted as 01.00.01.")
softwareEquipmentReleaseBench1 = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareEquipmentReleaseBench1.setDescription("ASCII string identifying the equipment release present in Bench1.")
softwareEquipmentReleaseBench1Status = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("notLoaded", 1), ("loaded", 2), ("running", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareEquipmentReleaseBench1Status.setDescription("Status of the bench 1 software.")
softwareEquipmentReleaseBench2 = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareEquipmentReleaseBench2.setDescription("ASCII string identifying the equipment release present in Bench2.")
softwareEquipmentReleaseBench2Status = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("notLoaded", 1), ("loaded", 2), ("running", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareEquipmentReleaseBench2Status.setDescription("Status of the bench 2 software.")
softwareIpAddressDwlServer = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareIpAddressDwlServer.setDescription("Ip address of the SNMP manager connected from which the Software is downloaded,\nif the leaf softwareRemoteIpAddressDwlServer is set '0.0.0.0'.")
softwareGosipAddressDwlServer = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareGosipAddressDwlServer.setDescription("GOSIP address of the remote element from which the Software is downloaded.")
softwareDownloadfile = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareDownloadfile.setDescription("CEM or LOM Directory and name of the descriptor file. The files\nwith the SW code must be present in the same directory.")
softwareActionRequest = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareActionRequest.setDescription("This Integer is a bit string  with each bit when set has the following meaning:\nBIT 0   -    Download  request\nBIT 1   -    Abort Download  request\nBIT 2   -    Bench switch   request\nBIT 4   -    Partial download\nBIT 5   -    Forced Download\nBIT 6   -    Implicit Activation\nBIT 7   -    Delete bench not running\nBIT 8   -    ODU FW download (whitout activation)\nBIT 9   -    ODU FW activation\nBIT 10  -    IDU FPGA download (whitout activation)\nBIT 11  -    IDU FPGA activation\nThe bit 4...6 enable/disable the different options on download request.")
softwareDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(5,1,2,3,4,)).subtype(namedValues=NamedValues(("downloading", 1), ("completed", 2), ("interrupted", 3), ("perifDownloading", 4), ("configurationDownloading", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareDownloadStatus.setDescription("Status of SW download operation.")
softwareUnitTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 11))
if mibBuilder.loadTexts: softwareUnitTable.setDescription("Table with Software records concerning units within the equipment.")
softwareUnitRecord = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 11, 1)).setIndexNames((0, "SIAE-SOFT-MIB", "softwareUnitId"), (0, "SIAE-SOFT-MIB", "softwareElementId"))
if mibBuilder.loadTexts: softwareUnitRecord.setDescription("Software record.")
softwareUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareUnitId.setDescription("This object is used as Index of the softwareUnit Table and also identifies\nthe unit in the equipment.")
softwareElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElementId.setDescription("This object is used as Index of the softwareUnit Table and also identifies\nthe SW programmable element in the specified unit.")
softwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 11, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("s-record", 1), ("image-FPGA", 2), ("volatile", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareType.setDescription("Format type.")
softwareUnitReleaseBench1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareUnitReleaseBench1.setDescription("ASCII string identifying the software release present\nin the programmable element of specified unit bench 1.")
softwareUnitReleaseBench2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareUnitReleaseBench2.setDescription("ASCII string identifying the software release present\nin the programmable element of specified unit bench 2.")
softwareUnitActualRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareUnitActualRelease.setDescription("ASCII string identifying the software release actually present\nin the programmable element of specified unit.")
softwareDownloadStatusTrapNotification = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,34,2,)).subtype(namedValues=NamedValues(("trapDisable", 1), ("trapEnable", 2), ("trapEnableWithACK", 34), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareDownloadStatusTrapNotification.setDescription("Enables/disables the trap generation on download status change.")
softwareRemoteIpAddressDwlServer = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 7, 13), IpAddress().clone("0.0.0.0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareRemoteIpAddressDwlServer.setDescription("Ip address of the remote Server from which the Software is downloaded,\ndifferent from SNMP manager connected IpAddress.\nIt is used if different from '0.0.0.0'.\nAfter each download procedure the leaf is set to '0.0.0.0'.")

# Augmentions

# Notifications

softwareDownloadStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3373, 1103, 0, 701)).setObjects(*(("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress"), ("SIAE-SOFT-MIB", "softwareDownloadStatus"), ) )
if mibBuilder.loadTexts: softwareDownloadStatusTrap.setDescription("This event is generated by ALFOHD-NE when the status of download is changed.\nThe data passed with the event are:\n   1) equipIpSnmpAgentAddress\n   2) softwareDownloadStatus")

# Exports

# Module identity
mibBuilder.exportSymbols("SIAE-SOFT-MIB", PYSNMP_MODULE_ID=software)

# Objects
mibBuilder.exportSymbols("SIAE-SOFT-MIB", software=software, softwareMibVersion=softwareMibVersion, softwareEquipmentReleaseBench1=softwareEquipmentReleaseBench1, softwareEquipmentReleaseBench1Status=softwareEquipmentReleaseBench1Status, softwareEquipmentReleaseBench2=softwareEquipmentReleaseBench2, softwareEquipmentReleaseBench2Status=softwareEquipmentReleaseBench2Status, softwareIpAddressDwlServer=softwareIpAddressDwlServer, softwareGosipAddressDwlServer=softwareGosipAddressDwlServer, softwareDownloadfile=softwareDownloadfile, softwareActionRequest=softwareActionRequest, softwareDownloadStatus=softwareDownloadStatus, softwareUnitTable=softwareUnitTable, softwareUnitRecord=softwareUnitRecord, softwareUnitId=softwareUnitId, softwareElementId=softwareElementId, softwareType=softwareType, softwareUnitReleaseBench1=softwareUnitReleaseBench1, softwareUnitReleaseBench2=softwareUnitReleaseBench2, softwareUnitActualRelease=softwareUnitActualRelease, softwareDownloadStatusTrapNotification=softwareDownloadStatusTrapNotification, softwareRemoteIpAddressDwlServer=softwareRemoteIpAddressDwlServer)

# Notifications
mibBuilder.exportSymbols("SIAE-SOFT-MIB", softwareDownloadStatusTrap=softwareDownloadStatusTrap)

